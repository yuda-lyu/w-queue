{"version":3,"file":"w-queue.umd.js","sources":["../src/WQueue.mjs"],"sourcesContent":["/**\r\n * 事件觸發器\r\n *\r\n * @returns {Object} 回傳事件觸發器物件，包含on與emit事件，on為註冊監聽事件，emit為觸發事件\r\n */\r\nfunction EventEmitter() {\r\n\r\n    //handles\r\n    let handles = {}\r\n\r\n    //on\r\n    function on(eventName, callback) {\r\n        if (!handles[eventName]) {\r\n            handles[eventName] = []\r\n        }\r\n        handles[eventName].push(callback)\r\n    }\r\n\r\n    //emit\r\n    function emit(eventName, ...arg) {\r\n        if (handles[eventName]) {\r\n            for (let i = 0; i < handles[eventName].length; i++) {\r\n                handles[eventName][i](...arg)\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        on,\r\n        emit,\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * 佇列處理器，單生產者單消費者模式，核心使用迭代器，具有消息堵塞與可限定同時處理上限數量功能\r\n *\r\n * @param {*} [opt={}] 輸入設定物件，預設{}\r\n * @param {Number} [opt.takeNumLimit=0] 輸入同時處理上限數量整數，預設0，代表無限制\r\n * @returns {Object} 回傳佇列處理器物件，包含事件on、push、get、cb。on為監聽事件，需自行監聽message事件，push為加入最新佇列消息，get為回傳當前最早佇列消息，cb為於message事件內回調使迭代器可取得下一個佇列消息\r\n */\r\nfunction WQueue(opt = {}) {\r\n\r\n    //default\r\n    if (!opt.takeNumLimit) {\r\n        opt.takeNumLimit = 0\r\n    }\r\n\r\n    //takeNum\r\n    let takeNum = 0\r\n\r\n    //qs\r\n    let qs = []\r\n\r\n    //ee\r\n    let ee = new EventEmitter()\r\n\r\n    //get, like iterator\r\n    function get() {\r\n        if (qs.length > 0) {\r\n\r\n            //add takeNum\r\n            takeNum += 1\r\n\r\n            //take first\r\n            let v = qs.splice(0, 1)[0]\r\n\r\n            //r\r\n            //let r = { value: v, done: false }\r\n            let r = v\r\n\r\n            return r\r\n        }\r\n        else {\r\n\r\n            //r\r\n            //let r = { value: undefined, done: true }\r\n            let r = null\r\n\r\n            return r\r\n        }\r\n    }\r\n    ee.get = get\r\n\r\n    //cb\r\n    function cb() {\r\n\r\n        //minu takeNum\r\n        takeNum -= 1\r\n\r\n        //emit\r\n        if (qs.length > 0) {\r\n            ee.emit('message', qs)\r\n        }\r\n\r\n    }\r\n    ee.cb = cb\r\n\r\n    //push\r\n    function push(v) {\r\n\r\n        //push\r\n        qs.push(v)\r\n        //console.log('push', qs)\r\n\r\n        //emit\r\n        if (opt.takeNumLimit <= 0 || takeNum < opt.takeNumLimit) {\r\n            ee.emit('message', qs)\r\n        }\r\n\r\n    }\r\n    ee.push = push\r\n\r\n    return ee\r\n}\r\n\r\n\r\nexport default WQueue\r\n"],"names":["EventEmitter","handles","on","eventName","callback","push","emit","arg","i","length","opt","takeNumLimit","takeNum","qs","ee","get","splice","cb","v"],"mappings":";;;;;iMAKA,SAASA,QAGDC,EAAU,SAmBP,CACHC,YAjBQC,EAAWC,GACdH,EAAQE,KACTF,EAAQE,GAAa,IAEzBF,EAAQE,GAAWE,KAAKD,IAcxBE,cAVUH,MACNF,EAAQE,GAAY,4BADAI,mCAAAA,wBAEf,IAAIC,EAAI,EAAGA,EAAIP,EAAQE,GAAWM,OAAQD,IAAK,UAChDP,EAAQE,IAAWK,WAAMD,cAmBzC,eAAgBG,yDAAM,GAGbA,EAAIC,eACLD,EAAIC,aAAe,OAInBC,EAAU,EAGVC,EAAK,GAGLC,EAAK,IAAId,SA2Bbc,EAAGC,sBAvBKF,EAAGJ,OAAS,GAGZG,GAAW,EAGHC,EAAGG,OAAO,EAAG,GAAG,IAYhB,MAmBhBF,EAAGG,cARCL,GAAW,EAGPC,EAAGJ,OAAS,GACZK,EAAGR,KAAK,UAAWO,IAmB3BC,EAAGT,cAZWa,GAGVL,EAAGR,KAAKa,IAIJR,EAAIC,cAAgB,GAAKC,EAAUF,EAAIC,eACvCG,EAAGR,KAAK,UAAWO,IAMpBC"}